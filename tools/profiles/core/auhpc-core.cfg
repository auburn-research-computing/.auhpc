#!/bin/bash

# auhpc configuration profile: system|runtime initialization 
# by the Auburn HPC Admins, for use with the auhpc-tools script collection
# https://github.com/auburn-research-computing/.auhpc
#
# [03.07.23]: <bradley@auburn.edu> initial revision
# 
# references: 
# auhpc-tools.cfg@SCRIPT_BASE_PROFILE
# auhpc-tools.sh@SCRIPT_PROFILES
#

########## begin mutable configuration items ###########

# toolchain and version, e.g. module load compiler/version
BASE_COMPILER="gcc"
BASE_COMPILER_VERSION="8.4.0"

# compiler binaries, i.e. CC,CXX,FC
BASE_COMPILER_BIN="gcc"
BASE_COMPILER_BIN_X="g++"
BASE_COMPILER_BIN_F="gfortran"

# dependent runtime profile(s), if needed (see README)
BASE_RUNTIME="R"
BASE_RUNTIME_PROFILE="${SCRIPT_PROFILES}/${BASE_RUNTIME}/*.cfg"
BASE_RUNTIME_DATA="${SCRIPT_PROFILES}/${BASE_RUNTIME}/${BASE_COMPILER}/${BASE_COMPILER_VERSION}"

########## end mutable configuration items ##########

# normalize profile names by deriving from path
# assumes <auhpc_trunk>/profile/<name>/*.cfg file structure

function profile-name() {
	local name=$(dirname ${BASH_SOURCE[0]} | awk -F'/' '{print $NF}')
	(( ${?} == 0 )) && echo "${name}" || return 1; return 0
}
PROFILE_PRIORITY="2"
PROFILE_PHASE="setup"
PROFILE_CONTEXT="auhpc tools :: script setup"
PROFILE_SHORT="base runtime script configuration"

# set a description we can use for help, output intervals
SCRIPT_DESCRIPTION="assign and export global variables for base runtime script functionality"
# set a description we can use for help, output intervals
PROFILE_CONTEXT="system"
PROFILE_SHORT="base environment profile"
PROFILE_DESCRIPTION="$(profile-name) profile: compiler toolchain and software\\\\runtime environment"

# describe intended|expected use of this profile, most importantly any write operations that impact broader context (e.g. rename|move|symlink operations,\n 
# modifications to external shell or software configuration files, externally defined environment variables, etc.\n"
PROFILE_USE="1. export compiler variables\n\
2. set base configuration profile(s)\n\
3. activate compiler environment\n"

# when sourced, add the profile metadata to global arrays so it can be referenced by calling scripts
[[ ! "${PROFILES_ENABLED}" =~ ^$(profile-name)$ ]] && PROFILES_ENABLED+=( "$(profile-name)" "$(readlink -f ${BASH_SOURCE[0]})" )
[[ ! "${PROFILE_DESCRIPTIONS}" =~ ^$(profile-name)$ ]] && PROFILE_DESCRIPTIONS+=( "$(profile-name)" "${PROFILE_DESCRIPTION}" )
[[ ! "${PROFILE_USES}" =~ ^$(profile-name)$ ]] && PROFILE_USES+=( "$(profile-name)" "${PROFILE_USE}" )
# PROFILES_ENABLED+=( "$(profile-name)" "$(readlink -f ${BASH_SOURCE[0]})" )
# PROFILE_DESCRIPTIONS+=( "$(profile-name)" "${PROFILE_DESCRIPTION}" )
# PROFILE_USES+=( "$(profile-name)" "${PROFILE_USE}" )
PROFILE_OUT+=( "$(profile-name)" core-config )

core-config() {
	
	# to avoid variable name conflicts, read executing script metadata into local variables
	local priority=2
	local script="$(readlink -f ${BASH_SOURCE[0]})"
	local trunk="$(readlink -f ${script} | rev | cut -d'/' -f2- | rev)" 
    local commands=( "$(grep -Eo "[a-z-]*[-a-z]{1,5}*\(\)\ \{" ${script} 2>/dev/null | sed 's/[\{\}\(\)]//g' 2>/dev/null)" )
	local name=$(profile-name)

	# locate associated description from global array
	for i in $(seq 1 2 ${#PROFILE_DESCRIPTIONS[@]}); do
    	key=$(echo ${PROFILE_DESCRIPTIONS[${i}-1]})
		[[ "${key}" =~ ${name}$ ]] && local description=${PROFILE_DESCRIPTIONS[${i}]} 2>/dev/null
	done
	
	# locate associated usage from global array
	for i in $(seq 1 2 ${#PROFILE_USES[@]}); do
    	key=$(echo ${PROFILE_USES[${i}-1]})
		[[ "${key}" =~ ${name}$ ]] && local usage=${PROFILE_USES[${i}]} 2>/dev/null
	done

	echo -e "${description[@]:-undocumented}"
	echo -e "path: ${script}\n"
	echo -e "${usage[@]:-undocumented}"
	
	echo -e "toolchain: ${BASE_COMPILER} ${BASE_COMPILER_VERSION}"
	#echo -e "runtime target: ${BASE_RUNTIME}"
    
    #[[ ! -z ${commands} ]] && echo -e "commands: $(echo ${commands[@]:-hidden} | sed -e 's/ /, /g')"

	echo -e "\nruntime profile: ${BASE_RUNTIME}"

    return 0

}