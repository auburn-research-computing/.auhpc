RUNTIME_MODULE="R"
RUNTIME_VERSION="4.2.1"
RUNTIME_CONFIG_SCRIPT="$(readlink -f ${BASH_SOURCE[0]})"
RUNTIME_CONFIG_PATH="$(readlink -f ${RUNTIME_CONFIG_SCRIPT})"
RUNTIME_CONFIG_TRUNK="$(readlink -f ${RUNTIME_CONFIG_PATH} | rev | cut -d'/' -f2- | rev)"
RUNTIME_CONFIG_NAME=".${RUNTIME_MODULE}profile"
RUNTIME_USER_LIBS_NAME="${RUNTIME_MODULE,,}libs"
RUNTIME_CONFIG_DEFAULT="${HOME}/${RUNTIME_CONFIG_NAME}"
RUNTIME_CONFIG_BASE="${RUNTIME_CONFIG_DEFAULT}.$(date +'%m%d%Y').bak"
RUNTIME_CONFIG_PROFILE="${RUNTIME_CONFIG_TRUNK}/${RUNTIME_CONFIG_NAME}.auhpc"
RUNTIME_USER_LIBS="${HOME}/.${RUNTIME_USER_LIBS_NAME:-auhpc}/${RUNTIME_VERSION}/${BASE_COMPILER}/${BASE_COMPILER_VERSION}"
RUNTIME_USER_LIBS_DEFAULT="${HOME}/.${RUNTIME_USER_LIBS_NAME:-auhpc}/active"

PROFILE_OUT+=( "${RUNTIME_MODULE}" "runtime-config" )
RUNTIME_FUNCTIONS=( "${RUNTIME_MODULE}" "runtime-config-new" )

runtime-config() {

    local commands=( $(grep -Eo "[a-z-]*[-a-z]{1,5}*\(\)\ \{" $(readlink -f ${BASH_SOURCE[0]}) 2>/dev/null | sed 's/[\{\}\(\)]//g' 2>/dev/null) )

	echo -e "\n--- runtime environment ---\n"
	echo -e "runtime: ${RUNTIME_MODULE}"
	echo -e "version: ${RUNTIME_VERSION}"
	
    [[ ! -z ${commands} ]] && echo -e "commands: ${commands[@]:-hidden}"

    return 0

}

function runtime-config-new() {

		echo "${BASH_SOURCE[0]}: creating runtime configuration items"

	    if [[ -e ${RUNTIME_USER_LIBS} ]]; then
	
			echo -ne "\nlibrary path ${RUNTIME_USER_LIBS} already exists. backup and recreate (y/N)? "
			read response
		    
            if [[ "${response}" =~ ^[y|Y]$ ]]; then
                if [[ -L ${RUNTIME_USER_LIBS} ]]; then
                    echo -ne "\nremoving symlink at ${BASE_RUNTIME} ... "
                    rm ${RUNTIME_USER_LIBS} &>/dev/null
                    if (( ! ${?} == 0 )); then
						echo "unable to remove symlink at ${RUNTIME_USER_LIBS}, will not create." 
					fi
                elif [[ -d ${RUNTIME_USER_LIBS} ]]; then
                    echo -ne "\nrenaming ${BASE_RUNTIME} library path ${RUNTIME_USER_LIBS} ... "
                    mv ${RUNTIME_USER_LIBS} ${RUNTIME_USER_LIBS}.$(date +'%M%d%y') &>/dev/null
                    if (( ! ${?} == 0 )); then 
						echo "unable to rename ${RUNTIME_USER_LIBS}, will attempt to use existing path"
					else
						echo "OK"
					fi
                else
					echo -ne "${RUNTIME_USER_LIBS}: unknown path type or file exists, leaving in place"
				fi
            else
                echo "keeping existing R libary path ${RUNTIME_USER_LIBS}"
            fi

        fi

    	if [[ ! -e ${RUNTIME_USER_LIBS} ]]; then 
            echo -ne "\ncreating ${BASE_RUNTIME} library path ${RUNTIME_USER_LIBS} ... " >&2
		    mkdir -p ${RUNTIME_USER_LIBS} &>/dev/null
		    (( ${?} == 0 )) && echo -e "OK" >&2 || echo "FAIL" >&2
	    else 
		    echo -e "EXISTS (not creating)\n" >&2
	    fi

	    if [[ ! "${R_LIBS_USER}" =~ ^.*${RUNTIME_USER_LIBS}.*$ ]]; then
		    echo -ne "setting environment variable R_LIBS_USER=${RUNTIME_USER_LIBS} ... "
            export R_LIBS_USER=${RUNTIME_USER_LIBS}:${R_LIBS_USER} && (( ${?} == 0 )) && echo -e "OK"  >&2 || echo "FAIL" >&2
        fi

		echo -ne "generating ${BASE_RUNTIME} runtime profile ${RUNTIME_CONFIG_PROFILE}... "

		echo -e "## generated by ${SCRIPT} on ${STAMP}\n" > ${RUNTIME_CONFIG_PROFILE}
		if (( ! ${?} == 0 )); then
			echo -e "FAIL\n\nerror: unable to write to ${RUNTIME_CONFIG_PROFILE}\n\n"
			return 1
		fi
		echo ".First <- function(){" >> ${RUNTIME_CONFIG_PROFILE}
		echo "  cat(\"\nWelcome at\", date(), \"\n\") }" >> ${RUNTIME_CONFIG_PROFILE}
		echo -e "\n" >> ${RUNTIME_CONFIG_PROFILE}
		echo "local({r <- getOption('repos'); r['CRAN'] <- 'http://cran.r-project.org'; options(repos=r)})" >> ${RUNTIME_CONFIG_PROFILE}
		echo -e "\n" >> ${RUNTIME_CONFIG_PROFILE}
		echo ".libPaths('"${RUNTIME_USER_LIBS}"')" >> ${RUNTIME_CONFIG_PROFILE}
		echo -e "\n" >> ${RUNTIME_CONFIG_PROFILE}
		echo ".Last <- function(){"  >> ${RUNTIME_CONFIG_PROFILE}
		echo "  cat(\"\nGoodbye at \", date(), \"\n\") }" >> ${RUNTIME_CONFIG_PROFILE}
		echo -e "\n" >> ${RUNTIME_CONFIG_PROFILE}
		
		echo -e "OK"

		count=$(wc -l ${RUNTIME_CONFIG_PROFILE} | awk '{printf "%d", $1}')

		echo -e "\n${RUNTIME_CONFIG_PROFILE} (${count} lines)\n"

		echo -ne "generating data path ${BASE_RUNTIME_DATA} ... "
		mkdir -p ${BASE_RUNTIME_DATA} 2>/dev/null
		
		if (( ${?} = 0 )); then
			echo "OK"
		else
			echo "FAIL"
		fi

		echo -ne "generating runtime data files ... "

		echo "CC=$(which ${BASE_COMPILER_BIN})" > ${BASE_RUNTIME_DATA}/base
		
		if (( ! ${?} == 0 )); then 
			echo "FAIL"
			return 1
		fi

		echo "CXX=$(which ${BASE_COMPILER_BIN_X})" >> ${BASE_RUNTIME_DATA}/base
		echo "FC=$(which ${BASE_COMPILER_BIN_F})" >> ${BASE_RUNTIME_DATA}/base
		echo "F77=$(which ${BASE_COMPILER_BIN_F})" >> ${BASE_RUNTIME_DATA}/base
		echo "PKG_CFLAGS+=-O3" >> ${BASE_RUNTIME_DATA}/base
		echo -e "PKG_CFLAGS+=-O3\n" >> ${BASE_RUNTIME_DATA}/base
		echo "OK"

		return 0

}