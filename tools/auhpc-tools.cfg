#!/bin/bash

# auhpc configuration profile: outer-script metadata
# by the Auburn HPC Admins, for use with auhpc-tools script collection
# ---------------------------------------------------------
# https://github.com/auburn-research-computing/.auhpc
# ---------------------------------------------------------
# [03.07.23]: <bradley@auburn.edu> initial revision
# references: @[auhpc-tools.sh:${SCRIPT_PROFILES} and global arrays
# ---------------------------------------------------------

########## begin mutable configuration items ###########

STAMP=$(date +'%Y%m%d') # grab some time, why not
SCRIPT_LOGLEVEL=3 # output verbosity 0 (silent) - 9 (overkill), although not fully implemented (as of 03.07.23)
SCRIPT_PROFILE="core" # used to derive profile location, similar to
SCRIPT_TARGET="easley" # currently unused, may need a system identifier for future implementations

########### end mutable configuration items ############

# normalize profile names by deriving from path
# assumes <auhpc_trunk>/profile/<name>/*.cfg file structure

function profile-name() {
	local name=$(dirname ${BASH_SOURCE[0]} | awk -F'/' '{print $NF}')
	(( ${?} == 0 )) && echo "${name}" || return 1; return 0
}

# set a description we can use for help, output intervals
SCRIPT_SHORT="base script configuration"
SCRIPT_DESCRIPTION="script setup: data paths and base configuration profile(s)"

# describe intended|expected use of this profile
# e.g. rename|move|symlink operations, modifications to external shell or software configuration files, 
# externally defined environment variables, etc.
SCRIPT_USE="1. define\\\\determine required filesystem locations\n\
2. set global variables from script metadata\n\
3. import base settings from default script configuration profile
4. initialize data paths and prepare base environment
5. import subsequent runtime\\\\software profile(s)\n"

# when sourced, add the profile metadata to global arrays so it can be referenced by calling scripts
PROFILES_ENABLED=( "$(profile-name)" "$(readlink -f ${BASH_SOURCE[0]})" )
PROFILE_DESCRIPTIONS=( "$(profile-name)" "${SCRIPT_DESCRIPTION}" )
PROFILE_USES=( "$(profile-name)" "${SCRIPT_USE}" )

# the filesystem location under which this project and all associated data are held (e.g. trunk, root, repo), various use 
SCRIPT_TRUNK="$(readlink -f ${BASH_SOURCE[0]} | rev | cut -d'/' -f2- | rev)" 
SCRIPT_PROFILES="${SCRIPT_TRUNK}/profiles" # filesystem path from which to locate configuration profiles
SCRIPT_BASE_PROFILE="core" # configuration file(s) to be sourced for this profile

# parse commands from the corresponding script using an internally known pattern 
SCRIPT_CMDS=( $(grep -Eo "[a-z-]*[-a-z]{1,5}*\(\)\ \{" $(readlink -f ${BASH_SOURCE[0]}) 2>/dev/null | sed 's/[\{\}\(\) ]//g' 2>/dev/null) )

# an array to hold commands that should be executed when this profile is sourced, associates a profile name with a function
# name, which allows the calling script to automatically issue function calls without hardcoding them

PROFILE_OUT=( "script" "script-config" )

# display profile details. (PROFILE_OUT global array, defined in profile PROFILE .cfg files  
# associates read-only functions with a profile name)

script-config() {

	# to avoid variable name conflicts, read executing script metadata into local variables
	local script="$(readlink -f ${BASH_SOURCE[0]})"
	local filename=$(basename ${script})
	local trunk="$(readlink -f ${script} | rev | cut -d'/' -f2- | rev)" 
    local commands=( "$(grep -Eo "[a-z-]*[-a-z]{1,5}*\(\)\ \{" ${script} 2>/dev/null | sed 's/[\{\}\(\)]//g' 2>/dev/null)" )
	local name=$(profile-name)
	
	# locate associated description from global array
	for i in $(seq 1 2 ${#PROFILE_DESCRIPTIONS[@]}); do
    	key=$(echo ${PROFILE_DESCRIPTIONS[${i}-1]})
		[[ "${key}" =~ ${name}$ ]] && local description=${PROFILE_DESCRIPTIONS[${i}]} 2>/dev/null
	done

	# title: TODO: add yet another variable to hold heading
	echo -e "\n--- ${filename} :: ${SCRIPT_SHORT} ---\n"

	# locate associated description from global array
	for i in $(seq 1 2 ${#PROFILE_DESCRIPTIONS[@]}); do
    	key=$(echo ${PROFILE_DESCRIPTIONS[${i}-1]})
		[[ "${key}" =~ ${name}$ ]] && local description=${PROFILE_DESCRIPTIONS[${i}]} 2>/dev/null
	done

	[[ ! -z ${description[@]} ]] && echo -e "${description[@]:-undocumented}\n"

	echo -e "path: ${script}"
	echo -e "install prefix: ${trunk:-undefined}"
	echo -e "profile data: ${SCRIPT_PROFILES}"
	echo -e "base profile: ${SCRIPT_BASE_PROFILE}\n"

	# locate associated usage from global array
	for i in $(seq 1 2 ${#PROFILE_USES[@]}); do
    	key=$(echo ${PROFILE_USES[${i}-1]})
		[[ "${key}" =~ ${name}$ ]] && local usage=${PROFILE_USES[${i}]} 2>/dev/null
	done
	
	[[ ! -z ${usage[@]} ]] && echo -e "usage:\n\n${usage[@]:-undocumented}"

    return 0

}